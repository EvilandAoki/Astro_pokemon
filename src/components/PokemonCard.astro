---
interface Props {
    pokemon: {
        name: string;
        url: string;
    };
    index: number;
}

const { pokemon, index } = Astro.props;
const id = pokemon.url.split("/").at(-2);
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;

// Colores para tipos Pokémon (versión oscura)
const typeColors: { [key: string]: string } = {
    normal: "bg-gray-400 text-gray-900",
    fire: "bg-red-600 text-white",
    water: "bg-blue-600 text-white",
    electric: "bg-yellow-400 text-gray-900",
    grass: "bg-green-600 text-white",
    ice: "bg-cyan-400 text-gray-900",
    fighting: "bg-orange-700 text-white",
    poison: "bg-purple-600 text-white",
    ground: "bg-yellow-700 text-white",
    flying: "bg-blue-400 text-white",
    psychic: "bg-pink-500 text-white",
    bug: "bg-lime-600 text-white",
    rock: "bg-yellow-800 text-white",
    ghost: "bg-purple-800 text-white",
    dragon: "bg-indigo-600 text-white",
    dark: "bg-gray-800 text-white",
    steel: "bg-gray-500 text-white",
    fairy: "bg-pink-300 text-gray-900",
};

// Obtener tipos del Pokémon (simulado - necesitarías fetch a la URL del Pokémon)
// Para este ejemplo usaremos tipos aleatorios
const randomTypes = ["fire", "water", "grass", "electric"];
const types = [randomTypes[Math.floor(Math.random() * randomTypes.length)]];
---

<article
    class="relative group bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl shadow-2xl p-4 w-full h-64 flex flex-col transition-transform duration-300 hover:scale-105 hover:shadow-2xl overflow-hidden"
>
    {/* Header de la tarjeta */}
    <div class="flex justify-between items-start mb-2">
        <h3 class="text-xl font-bold text-white capitalize">{pokemon.name}</h3>
        <span class="text-sm font-mono text-gray-300"
            >#{id?.toString().padStart(3, "0")}</span
        >
    </div>

    {/* Imagen del Pokémon */}
    <div class="relative flex-1 flex justify-center items-center">
        <img
            src={imageUrl}
            alt={pokemon.name}
            class="z-10 w-32 h-32 object-contain drop-shadow-lg transition-transform duration-300 group-hover:scale-110"
            loading="lazy"
        />
        {/* Patrón de fondo */}
        <div class="absolute inset-0 opacity-20 bg-pokemon-pattern"></div>
    </div>

    {/* Footer de la tarjeta */}
    <div class="flex justify-between items-center mt-2">
        {/* Tipos */}
        <div class="flex gap-2">
            {
                types.map((type) => (
                    <span
                        class={`${typeColors[type]} px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wide`}
                    >
                        {type}
                    </span>
                ))
            }
        </div>

        {/* Botón de detalles */}
        <a
            href={`/pokemons/${pokemon.name}`}
            class="px-3 py-1 bg-white/20 hover:bg-white/30 text-white rounded-full text-xs font-semibold transition-colors"
        >
            Detalles
        </a>
    </div>

    {/* Efecto de brillo al hover */}
    <div
        class="absolute inset-0 opacity-0 group-hover:opacity-20 transition-opacity pointer-events-none"
    >
        <div
            class="absolute top-0 left-0 w-32 h-32 bg-gradient-to-r from-white/30 to-transparent -rotate-45"
        >
        </div>
    </div>
</article>
