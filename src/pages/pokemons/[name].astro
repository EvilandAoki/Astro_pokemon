---
// src/pages/pokemon/[id].astro
import type { PokemonListResponse } from "../../interfaces/pokemon-list.response";
import Layout from "../../layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { Icon } from "astro-icon/components";

interface PokemonDetails {
    id: number;
    name: string;
    types: Array<{
        slot: number;
        type: {
            name: string;
        };
    }>;
    stats: Array<{ base_stat: number; stat: { name: string } }>;
    abilities: Array<{ ability: { name: string } }>;
    height: number;
    weight: number;
    sprites: {
        other: {
            "official-artwork": { front_default: string };
        };
    };
}

export const getStaticPaths = (async () => {
    const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");

    const { results } = (await resp.json()) as PokemonListResponse;

    return results.map(({ name, url }) => {
        const id = url.split("/").at(-2);
        const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
        return {
            params: { name: name, id: id },
            props: { name: name, url: imageUrl, id: id },
        };
    });
}) satisfies GetStaticPaths;

const { id, name } = Astro.props;
const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
const pokemon: PokemonDetails = await response.json();

// Configuración de colores (igual que en las tarjetas)
const typeColors: { [key: string]: string } = {
    normal: "bg-gray-400 text-gray-900",
    fire: "bg-red-600 text-white",
    water: "bg-blue-600 text-white",
    electric: "bg-yellow-400 text-gray-900",
    grass: "bg-green-600 text-white",
    ice: "bg-cyan-400 text-gray-900",
    fighting: "bg-orange-700 text-white",
    poison: "bg-purple-600 text-white",
    ground: "bg-yellow-700 text-white",
    flying: "bg-blue-400 text-white",
    psychic: "bg-pink-500 text-white",
    bug: "bg-lime-600 text-white",
    rock: "bg-yellow-800 text-white",
    ghost: "bg-purple-800 text-white",
    dragon: "bg-indigo-600 text-white",
    dark: "bg-gray-800 text-white",
    steel: "bg-gray-500 text-white",
    fairy: "bg-pink-300 text-gray-900",
};
---

<Layout title={`${name} - Detalles`}>
    <main
        class="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 py-8 px-4"
    >
        <div class="max-w-4xl mx-auto">
            <button onclick="history.back()">
                <a
                    class="inline-block mb-8 text-white hover:text-blue-400 transition-colors"
                >
                    ← Volver
                </a>
            </button>
            <div
                class="bg-gradient-to-br from-gray-800 to-gray-700 rounded-2xl shadow-2xl p-6"
            >
                {/* Header */}
                <div
                    class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6"
                >
                    <div class="flex justify-between">
                        <h1
                            class="text-4xl font-bold text-white capitalize mb-2"
                        >
                            {name}
                        </h1>
                        <button
                            class="ml-32"
                            id="btn-favorite"
                            data-name={name}
                            data-id={id}
                        >
                            <Icon data-outline name="heart-outline" size={40} />
                            <Icon
                                class="hidden"
                                data-full
                                name="heart-full"
                                size={40}
                            />
                        </button>
                    </div>
                    <span class="text-2xl font-mono text-gray-300"
                        >#{id?.toString().padStart(3, "0")}</span
                    >
                </div>

                {/* Contenido principal */}
                <div class="grid md:grid-cols-2 gap-8">
                    {/* Sección izquierda - Imagen y tipos */}
                    <div class="space-y-6">
                        <div class="relative bg-gray-900/50 rounded-xl p-6">
                            <img
                                src={pokemon.sprites.other["official-artwork"]
                                    .front_default}
                                alt={name}
                                class="w-full h-64 object-contain drop-shadow-2xl"
                                loading="eager"
                            />
                        </div>

                        <div class="space-y-4">
                            <h2 class="text-xl font-bold text-white mb-2">
                                Tipos
                            </h2>
                            <div class="flex flex-wrap gap-2">
                                {
                                    pokemon.types?.map(
                                        ({ type }) =>
                                            type && (
                                                <span
                                                    class={`${typeColors[type.name]} px-4 py-2 rounded-full text-sm font-bold uppercase`}
                                                >
                                                    {type.name}
                                                </span>
                                            ),
                                    )
                                }
                            </div>
                        </div>
                    </div>

                    {/* Sección derecha - Stats y detalles */}
                    <div class="space-y-6">
                        {/* Stats */}
                        <div class="space-y-4">
                            <h2 class="text-xl font-bold text-white">
                                Estadísticas
                            </h2>
                            <div class="space-y-3">
                                {
                                    pokemon.stats.map((stat) => (
                                        <div class="flex items-center gap-3">
                                            <span class="w-24 text-white font-medium capitalize">
                                                {stat.stat.name}
                                            </span>
                                            <span class="w-12 text-right text-gray-300">
                                                {stat.base_stat}
                                            </span>
                                            <div class="flex-1 h-3 bg-gray-700 rounded-full overflow-hidden">
                                                <div
                                                    class="h-full rounded-full transition-all duration-500"
                                                    style={`width: ${(stat.base_stat / 255) * 100}%; background-color: ${typeColors[pokemon.types[0].type.name]}`}
                                                />
                                            </div>
                                        </div>
                                    ))
                                }
                            </div>
                        </div>

                        {/* Detalles adicionales */}
                        <div class="grid grid-cols-2 gap-4">
                            <div class="bg-gray-800/50 p-4 rounded-xl">
                                <p class="text-gray-400 text-sm">Altura</p>
                                <p class="text-white font-bold">
                                    {(pokemon.height / 10).toFixed(1)} m
                                </p>
                            </div>
                            <div class="bg-gray-800/50 p-4 rounded-xl">
                                <p class="text-gray-400 text-sm">Peso</p>
                                <p class="text-white font-bold">
                                    {(pokemon.weight / 10).toFixed(1)} kg
                                </p>
                            </div>
                            <div
                                class="col-span-2 bg-gray-800/50 p-4 rounded-xl"
                            >
                                <p class="text-gray-400 text-sm">Habilidades</p>
                                <p class="text-white font-bold capitalize">
                                    {
                                        pokemon.abilities
                                            .map((a) => a.ability.name)
                                            .join(", ")
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<script>
    import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

    const handlePageLoad = () => {
        let favoritePokemon: FavoritePokemon[] = JSON.parse(
            localStorage.getItem("favorites") ?? "[]",
        );

        const btnFavorite = document.querySelector(
            "#btn-favorite",
        ) as HTMLButtonElement;

        const name = btnFavorite.dataset.name ?? "";
        const id = btnFavorite.dataset.id ?? "";

        console.log({ name, id });

        if (!btnFavorite) return;

        const heartOutline = btnFavorite.querySelector(
            "[data-outline]",
        ) as HTMLElement;
        const heartFull = btnFavorite.querySelector(
            "[data-full]",
        ) as HTMLElement;
        console.log(heartFull, heartOutline);
        const isFavorite = favoritePokemon.find((fav) => fav.name == name);

        if (isFavorite) {
            heartOutline.classList.add("hidden");
            heartFull.classList.remove("hidden");
        }

        const toggleFavorite = () => {
            const isFavorite = favoritePokemon.some((fav) => fav.name == name);

            if (isFavorite) {
                favoritePokemon = favoritePokemon.filter(
                    (fav) => fav.name != name,
                );
            } else {
                favoritePokemon.push({ id: +id, name: name });
            }
            localStorage.setItem("favorites", JSON.stringify(favoritePokemon));
        };

        btnFavorite.addEventListener("click", () => {
            heartOutline.classList.toggle("hidden");
            heartFull.classList.toggle("hidden");
            toggleFavorite();
        });
    };

    document.addEventListener("astro:page-load", () => {
        handlePageLoad();
    });
</script>

<style>
    #btn-favorite {
        @apply hover:animate-pulse;
    }
</style>
